import api from '../utils/api'
import type { ApiResponse, QueryParams } from './api.types'
import type { AxiosRequestConfig } from 'axios'
import { apiCache } from '../utils/apiCache'

export class BaseService<T = any> {
  protected endpoint: string
  protected useCache: boolean

  constructor(endpoint: string, useCache = true) {
    this.endpoint = endpoint
    this.useCache = useCache
  }  protected async get(path: string = '', config?: AxiosRequestConfig): Promise<ApiResponse<T>> {
    const url = path ? `${this.endpoint}/${path}` : this.endpoint
    
    if (this.useCache) {
      const cachedData = apiCache.get<ApiResponse<T>>(url, config?.params)
      if (cachedData) {
        return cachedData
      }
    }
    
    const response = await api.get(url, config).then(res => res.data)
    
    if (this.useCache && response.success) {
      apiCache.set(url, response, config?.params)
    }
    
    return response
  }

  protected async post(
    path: string = '',
    data?: any,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    const url = path ? `${this.endpoint}/${path}` : this.endpoint
    const response = await api.post(url, data, config).then(res => res.data)

    if (this.useCache && response.success) {
      apiCache.clearByUrl(this.endpoint)
    }

    return response
  }

  protected async put<T>(
    path: string = '',
    data?: any,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    const url = path ? `${this.endpoint}/${path}` : this.endpoint
    const response = await api.put(url, data, config).then(res => res.data)

    if (this.useCache && response.success) {
      apiCache.clearByUrl(this.endpoint)
    }

    return response
  }

  protected async patch<T>(
    path: string = '',
    data?: any,
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    const url = path ? `${this.endpoint}/${path}` : this.endpoint
    const response = await api.patch(url, data, config).then(res => res.data)

    if (this.useCache && response.success) {
      apiCache.clearByUrl(this.endpoint)
    }

    return response
  }

  protected async remove<T>(
    path: string = '',
    config?: AxiosRequestConfig
  ): Promise<ApiResponse<T>> {
    const url = path ? `${this.endpoint}/${path}` : this.endpoint
    const response = await api.delete(url, config).then(res => res.data)

    if (this.useCache && response.success) {
      apiCache.clearByUrl(this.endpoint)
    }

    return response
  }

  async getAll<T>(params?: QueryParams): Promise<ApiResponse<T[]>> {
    return this.get<T[]>('', { params })
  }

  async getById<T>(id: string): Promise<ApiResponse<T>> {
    return this.get<T>(id)
  }

  async create<T>(data: any, config?: AxiosRequestConfig): Promise<ApiResponse<T>> {
    const response = await this.post<T>('', data, config)
    if (response.success) {
      apiCache.clearByUrl(this.endpoint)
    }
    return response
  }

  async update<T>(id: string, data: any): Promise<ApiResponse<T>> {
    const response = await this.put<T>(id, data)
    if (response.success) {
      apiCache.clearByUrl(this.endpoint)
      apiCache.clearByUrl(`${this.endpoint}/${id}`)
    }
    return response
  }

  async delete(id: string): Promise<ApiResponse<void>> {
    const response = await this.remove(id)
    if (response.success) {
      apiCache.clearByUrl(this.endpoint)
      apiCache.clearByUrl(`${this.endpoint}/${id}`)
    }
    return response
  }

  clearCache(): void {
    apiCache.clearByUrl(this.endpoint)
  }
}
