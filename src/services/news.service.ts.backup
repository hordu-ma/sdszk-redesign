import { BaseService } from './base.service'
import type { ApiResponse, QueryParams } from './api.types'

export type NewsCategory = 'center' | 'notice' | 'policy' | 'theory' | 'teaching'

export interface News {
  _id: string
  title: string
  content: string
  category: NewsCategory
  publishDate: string
  createdAt: string
  updatedAt: string
  author?: string
  summary?: string
  cover?: string
  isPublished: boolean
  views?: number
  tags?: string[]
  source?: string
  metaTitle?: string
  metaDescription?: string
  metaKeywords?: string[]
}

export interface NewsQuery {
  page?: number
  limit?: number
  category?: string
  search?: string
  isPublished?: boolean
  sortBy?: string
  sortOrder?: number
}

export class NewsService extends BaseService {
  constructor() {
    super('/api/news')
  }

  async getList(query?: NewsQuery): Promise<ApiResponse<News[]>> {
    return this.getAll(query)
  }

  async getById(id: string): Promise<ApiResponse<News>> {
    return this.get(id)
  }

  async create(data: Partial<News>): Promise<ApiResponse<News>> {
    if (data.publishDate) {
      data.isPublished = true
    }
    return this.post('', data)
  }

  async update(id: string, data: Partial<News>): Promise<ApiResponse<News>> {
    return this.put(id, data)
  }

  async togglePublish(id: string): Promise<ApiResponse<News>> {
    return this.patch(`${id}/toggle-publish`)
  }

  async delete(id: string): Promise<ApiResponse<void>> {
    return this.remove(id)
  }

  async getByCategory(
    category: NewsCategory,
    query?: Omit<NewsQuery, 'category'>
  ): Promise<ApiResponse<News[]>> {
    return this.getList({ ...query, category })
  }

  async getPublished(query?: Omit<NewsQuery, 'isPublished'>): Promise<ApiResponse<News[]>> {
    return this.getList({ ...query, isPublished: true })
  }

  async getDrafts(query?: Omit<NewsQuery, 'isPublished'>): Promise<ApiResponse<News[]>> {
    return this.getList({ ...query, isPublished: false })
  }

  async getRecent(limit: number = 5): Promise<ApiResponse<News[]>> {
    return this.getPublished({ limit, sortBy: 'publishDate', sortOrder: -1 })
  }

  async incrementViews(id: string): Promise<ApiResponse<News>> {
    return this.patch(`${id}/views`)
  }
}
