name: Playwright Tests
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

# 环境变量
env:
  NODE_VERSION: "20"
  CACHE_VERSION: v3

jobs:
  test:
    name: E2E Tests
    timeout-minutes: 30
    runs-on: ubuntu-latest

    # 添加服务容器
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: sdszk_test
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ping: 1})'"
          --health-interval 15s
          --health-timeout 30s
          --health-retries 10

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 10s
          --health-retries 15
          --health-start-period 30s

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # 添加npm依赖缓存
      - name: 缓存前端依赖项
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-node-

      # 缓存Playwright浏览器
      - name: 缓存Playwright浏览器
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-playwright-

      - name: 安装前端依赖项
        run: |
          echo "📦 安装前端依赖..."
          npm ci --prefer-offline --no-audit
          echo "✅ 前端依赖安装完成"

      - name: 安装后端依赖项
        run: |
          echo "📦 安装后端依赖..."
          cd server
          npm ci --prefer-offline --no-audit
          cd ..
          echo "✅ 后端依赖安装完成"

      - name: 安装Playwright浏览器
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "🎭 安装Playwright浏览器..."
          npx playwright install --with-deps chromium

      # 仅在缓存命中时安装系统依赖
      - name: 安装系统依赖
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps chromium

      - name: 设置CI环境配置
        run: |
          echo "📝 设置CI环境配置..."

          # 创建基本的环境配置
          cat > .env << EOF
          NODE_ENV=test
          VITE_API_BASE_URL=http://localhost:3000/api
          EOF

          cat > server/.env << EOF
          NODE_ENV=test
          MONGODB_URI=mongodb://localhost:27017/sdszk_test
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_ENABLED=true
          JWT_SECRET=test-secret-key
          PORT=3000
          CORS_ORIGIN=http://localhost:5173
          EOF

          echo "✅ CI环境配置完成"

      - name: 等待依赖服务
        run: |
          echo "⏳ 使用统一脚本等待依赖服务 (MongoDB / Redis)..."

          # 基础容器状态
          echo "🐳 容器状态:"
          docker ps -a

          # 等待容器健康检查通过
          echo "⏳ 等待服务健康检查..."
          for i in {1..30}; do
            if docker ps --filter "health=healthy" --filter "ancestor=redis:7.2-alpine" | grep -q redis; then
              echo "✅ Redis 容器健康检查通过"
              break
            fi
            if [ $i -eq 30 ]; then
              echo "⚠️ Redis 容器健康检查超时，继续执行连接测试"
            fi
            sleep 2
          done

          # 输出关键容器日志 (截取)
          echo "📋 MongoDB容器日志(最后20行):"
          docker logs $(docker ps -q --filter "ancestor=mongo:5.0") --tail 20 2>/dev/null || echo "无法获取MongoDB日志"
          echo "📋 Redis容器日志(最后15行):"
          docker logs $(docker ps -q --filter "ancestor=redis:7.2-alpine") --tail 15 2>/dev/null || echo "无法获取Redis日志"

          # 使用简化的服务等待脚本
          bash scripts/wait-services-simple.sh --timeout 180 --verbose \
            mongo://localhost:27017 \
            redis://localhost:6379

          echo "✅ 基础依赖服务全部就绪，开始验证深度连接..."

          # 深度探活（脚本包含读写/命令验证）
          ./scripts/test-mongodb.sh
          REDIS_HOST=localhost VERBOSE=1 ./scripts/test-redis-enhanced.sh

      # 启动并验证服务
      - name: 启动并验证应用服务
        run: |
          echo "🚀 启动应用服务 (Backend + Frontend)..."

          # 启动后端
          cd server
          npm start > ../backend.log 2>&1 &
          echo $! > /tmp/backend.pid
          cd ..

          # 启动前端
          npm run dev > frontend.log 2>&1 &
          echo $! > /tmp/frontend.pid

          echo "⏳ 等待应用层服务 (HTTP) 就绪..."
          bash scripts/wait-services-simple.sh --timeout 120 --verbose \
            http://localhost:3000/api/health \
            http://localhost:5173

          echo "✅ 应用服务可访问，执行二次依赖校验..."
          ./scripts/test-mongodb.sh
          REDIS_HOST=localhost ./scripts/test-redis-enhanced.sh

          echo "📄 后端最近日志 (20行):"
          tail -20 backend.log || true
          echo "📄 前端最近日志 (20行):"
          tail -20 frontend.log || true

      - name: 运行基础功能测试
        run: |
          echo "🎭 运行基础功能测试..."
          npm run test:e2e:basic
        env:
          CI: true
          NODE_ENV: test

      - name: 运行性能测试 (允许失败)
        continue-on-error: true
        run: |
          echo "🎭 运行性能测试 (可选)..."
          npm run test:e2e:performance
        env:
          CI: true
          NODE_ENV: test

      # 停止服务
      - name: 停止应用服务
        if: always()
        run: |
          echo "🛑 停止应用服务..."

          # 停止前端服务
          if [ -f /tmp/frontend.pid ]; then
            pid=$(cat /tmp/frontend.pid)
            if kill -0 "$pid" 2>/dev/null; then
              kill "$pid" 2>/dev/null || true
              sleep 2
              kill -9 "$pid" 2>/dev/null || true
            fi
            rm -f /tmp/frontend.pid
            echo "✅ 前端服务已停止"
          fi

          # 停止后端服务
          if [ -f /tmp/backend.pid ]; then
            pid=$(cat /tmp/backend.pid)
            if kill -0 "$pid" 2>/dev/null; then
              kill "$pid" 2>/dev/null || true
              sleep 2
              kill -9 "$pid" 2>/dev/null || true
            fi
            rm -f /tmp/backend.pid
            echo "✅ 后端服务已停止"
          fi

          # 强制清理端口
          lsof -ti:5173 | xargs kill -9 2>/dev/null || true
          lsof -ti:3000 | xargs kill -9 2>/dev/null || true

          echo "🧹 服务清理完成"

      # 上传测试报告
      - name: 上传Playwright报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      # 收集测试日志
      - name: 收集服务日志
        if: always()
        run: |
          echo "📋 收集服务运行日志..."

          echo "=== 后端日志 (最后50行) ===" > test-logs.txt
          tail -50 backend.log >> test-logs.txt 2>/dev/null || echo "无后端日志" >> test-logs.txt

          echo "=== 前端日志 (最后50行) ===" >> test-logs.txt
          tail -50 frontend.log >> test-logs.txt 2>/dev/null || echo "无前端日志" >> test-logs.txt

          echo "=== 系统信息 ===" >> test-logs.txt
          echo "内存使用:" >> test-logs.txt
          free -h >> test-logs.txt 2>/dev/null || true
          echo "磁盘使用:" >> test-logs.txt
          df -h >> test-logs.txt 2>/dev/null || true

      # 上传日志
      - name: 上传测试日志
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-logs-${{ github.run_id }}
          path: test-logs.txt
          retention-days: 3

      # 上传测试结果摘要
      - name: 发布测试结果摘要
        if: always()
        run: |
          echo "## 🎭 Playwright 测试结果" >> $GITHUB_STEP_SUMMARY

          if [ -f "playwright-report/index.html" ]; then
            echo "- ✅ 测试报告已生成" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 查看详细报告请下载 playwright-report 工件" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ 未找到测试报告" >> $GITHUB_STEP_SUMMARY
          fi

          # 检查测试结果
          basic_tests_exit_code=$?
          if [ $basic_tests_exit_code -eq 0 ]; then
            echo "- ✅ 基础功能测试通过" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ❌ 基础功能测试失败" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- 📝 性能测试结果请查看详细报告 (允许失败)" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 提交: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 测试时间: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 测试环境: Ubuntu Latest + Node.js ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
