name: Playwright Tests
on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]

# 环境变量
env:
  NODE_VERSION: "20"
  CACHE_VERSION: v3

jobs:
  test:
    name: E2E Tests
    timeout-minutes: 30
    runs-on: ubuntu-latest

    # 添加服务容器
    services:
      mongodb:
        image: mongo:5.0
        ports:
          - 27017:27017
        env:
          MONGO_INITDB_DATABASE: sdszk_test
        options: >-
          --health-cmd "mongo --eval 'db.runCommand({ping: 1})'"
          --health-interval 15s
          --health-timeout 30s
          --health-retries 10

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 15s
          --health-timeout 30s
          --health-retries 10

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # 添加npm依赖缓存
      - name: 缓存前端依赖项
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-node-

      # 缓存Playwright浏览器
      - name: 缓存Playwright浏览器
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-playwright-

      - name: 安装前端依赖项
        run: |
          echo "📦 安装前端依赖..."
          npm ci --prefer-offline --no-audit
          echo "✅ 前端依赖安装完成"

      - name: 安装后端依赖项
        run: |
          echo "📦 安装后端依赖..."
          cd server
          npm ci --prefer-offline --no-audit
          cd ..
          echo "✅ 后端依赖安装完成"

      - name: 安装Playwright浏览器
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: |
          echo "🎭 安装Playwright浏览器..."
          npx playwright install --with-deps chromium

      # 仅在缓存命中时安装系统依赖
      - name: 安装系统依赖
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps chromium

      - name: 设置CI环境配置
        run: |
          echo "📝 设置CI环境配置..."

          # 创建基本的环境配置
          cat > .env << EOF
          NODE_ENV=test
          VITE_API_BASE_URL=http://localhost:3000/api
          EOF

          cat > server/.env << EOF
          NODE_ENV=test
          MONGODB_URI=mongodb://localhost:27017/sdszk_test
          REDIS_HOST=localhost
          REDIS_PORT=6379
          REDIS_ENABLED=true
          JWT_SECRET=test-secret-key
          PORT=3000
          CORS_ORIGIN=http://localhost:5173
          EOF

          echo "✅ CI环境配置完成"

      - name: 等待服务就绪
        run: |
          echo "⏳ 等待数据库服务启动..."

          # 检查Docker容器状态
          echo "🐳 检查Docker容器状态..."
          docker ps -a

          # 检查MongoDB容器日志
          echo "📋 MongoDB容器日志 (最后20行):"
          docker logs $(docker ps -q --filter "ancestor=mongo:5.0") --tail 20 2>/dev/null || echo "无法获取MongoDB日志"

          # 检查Redis容器日志
          echo "📋 Redis容器日志 (最后10行):"
          docker logs $(docker ps -q --filter "ancestor=redis:7.2-alpine") --tail 10 2>/dev/null || echo "无法获取Redis日志"

          # 等待服务容器健康检查通过
          echo "⏳ 等待服务容器启动..."
          sleep 15

          # 使用专用脚本检查MongoDB
          ./scripts/test-mongodb.sh

          # 等待Redis
          echo "🔍 检查Redis连接..."
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; do
            echo "等待Redis启动..."
            sleep 2
          done'
          echo "✅ Redis 已就绪"

      # 启动后端服务
      - name: 启动后端服务
        run: |
          echo "🖥️ 启动后端服务..."
          cd server
          npm start &
          echo $! > /tmp/backend.pid
          cd ..

          echo "⏳ 等待后端服务启动..."
          timeout 180 bash -c 'until curl -sf http://localhost:3000 >/dev/null 2>&1 || curl -sf http://localhost:3000/api/health >/dev/null 2>&1; do
            echo "等待后端服务响应..."
            sleep 3
          done'
          echo "✅ 后端服务已启动"

      # 启动前端服务
      - name: 启动前端服务
        run: |
          echo "🌐 启动前端服务..."
          npm run dev &
          echo $! > /tmp/frontend.pid

          echo "⏳ 等待前端服务启动..."
          timeout 180 bash -c 'until curl -sf http://localhost:5173 >/dev/null 2>&1; do
            echo "等待前端服务响应..."
            sleep 3
          done'
          echo "✅ 前端服务已启动"

      - name: 验证服务状态
        run: |
          echo "🔍 验证服务状态..."

          # 检查Docker容器状态
          echo "🐳 检查Docker容器状态..."
          docker ps -a

          # 检查MongoDB容器日志
          echo "📋 MongoDB容器日志 (最后20行):"
          docker logs $(docker ps -q --filter "ancestor=mongo:5.0") --tail 20 2>/dev/null || echo "无法获取MongoDB日志"

          # 再次确认数据库服务
          ./scripts/test-mongodb.sh

          # 检查后端服务
          if curl -sf http://localhost:3000 >/dev/null 2>&1; then
            echo "✅ 后端服务响应正常"
          else
            echo "❌ 后端服务无响应"
            if [ -f /tmp/backend.pid ]; then
              echo "后端进程状态:"
              ps -p $(cat /tmp/backend.pid) || echo "后端进程不存在"
            fi
            exit 1
          fi

          # 检查前端服务
          if curl -sf http://localhost:5173 >/dev/null 2>&1; then
            echo "✅ 前端服务响应正常"
          else
            echo "❌ 前端服务无响应"
            if [ -f /tmp/frontend.pid ]; then
              echo "前端进程状态:"
              ps -p $(cat /tmp/frontend.pid) || echo "前端进程不存在"
            fi
            exit 1
          fi

      - name: 运行Playwright测试
        run: |
          echo "🎭 运行Playwright测试..."
          npx playwright test --reporter=html,line
        env:
          CI: true
          NODE_ENV: test

      # 停止服务
      - name: 停止应用服务
        if: always()
        run: |
          echo "🛑 停止应用服务..."

          # 停止前端服务
          if [ -f /tmp/frontend.pid ]; then
            pid=$(cat /tmp/frontend.pid)
            if kill -0 "$pid" 2>/dev/null; then
              kill "$pid" 2>/dev/null || true
              sleep 2
              kill -9 "$pid" 2>/dev/null || true
            fi
            rm -f /tmp/frontend.pid
            echo "✅ 前端服务已停止"
          fi

          # 停止后端服务
          if [ -f /tmp/backend.pid ]; then
            pid=$(cat /tmp/backend.pid)
            if kill -0 "$pid" 2>/dev/null; then
              kill "$pid" 2>/dev/null || true
              sleep 2
              kill -9 "$pid" 2>/dev/null || true
            fi
            rm -f /tmp/backend.pid
            echo "✅ 后端服务已停止"
          fi

          # 强制清理端口
          lsof -ti:5173 | xargs kill -9 2>/dev/null || true
          lsof -ti:3000 | xargs kill -9 2>/dev/null || true

          echo "🧹 服务清理完成"

      # 上传测试报告
      - name: 上传Playwright报告
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: playwright-report-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
          retention-days: 7

      # 上传测试结果摘要
      - name: 发布测试结果摘要
        if: always()
        run: |
          echo "## 🎭 Playwright 测试结果" >> $GITHUB_STEP_SUMMARY

          if [ -f "playwright-report/index.html" ]; then
            echo "- ✅ 测试报告已生成" >> $GITHUB_STEP_SUMMARY
            echo "- 📊 查看详细报告请下载 playwright-report 工件" >> $GITHUB_STEP_SUMMARY
          else
            echo "- ⚠️ 未找到测试报告" >> $GITHUB_STEP_SUMMARY
          fi

          echo "- 🔗 提交: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 测试时间: $(date)" >> $GITHUB_STEP_SUMMARY
          echo "- 🌐 测试环境: Ubuntu Latest + Node.js ${{ env.NODE_VERSION }}" >> $GITHUB_STEP_SUMMARY
