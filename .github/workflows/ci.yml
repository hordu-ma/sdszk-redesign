name: CI/CD Pipeline

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master]

# 环境变量
env:
  NODE_VERSION: "20"
  CACHE_VERSION: v2

jobs:
  # 基础检查：代码质量和单元测试
  basic-checks:
    name: 代码质量检查
    runs-on: ubuntu-latest

    # 添加服务容器
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    outputs:
      should-run-e2e: ${{ steps.check-changes.outputs.should-run-e2e }}

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      # 添加npm缓存
      - name: 缓存npm依赖
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-node-

      - name: 安装前端依赖
        run: npm ci

      - name: 安装后端依赖
        run: |
          cd server
          npm ci
          cd ..

      - name: 设置CI环境变量
        run: |
          cp .env.ci .env
          cp server/.env.ci server/.env

      - name: 等待服务就绪
        run: |
          # 等待MongoDB就绪
          timeout 60 bash -c 'until mongosh --host localhost:27017 --eval "db.runCommand({ping: 1})" >/dev/null 2>&1; do sleep 2; done'
          echo "✅ MongoDB 已就绪"

          # 等待Redis就绪
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; do sleep 2; done'
          echo "✅ Redis 已就绪"

      - name: 代码风格检查
        run: npm run lint

      - name: TypeScript类型检查
        run: npx vue-tsc --noEmit

      - name: 单元测试
        run: npm run test
        env:
          NODE_ENV: test

      - name: 集成测试
        run: npm run test:integration
        env:
          NODE_ENV: test

      # 检查是否需要运行E2E测试
      - name: 检查文件变更
        id: check-changes
        run: |
          if git diff --name-only HEAD^ HEAD | grep -E '\.(vue|ts|js|html)$|package\.json|playwright\.config' > /dev/null; then
            echo "should-run-e2e=true" >> $GITHUB_OUTPUT
          else
            echo "should-run-e2e=false" >> $GITHUB_OUTPUT
          fi

  # 构建检查
  build-check:
    name: 构建检查
    runs-on: ubuntu-latest
    needs: basic-checks

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 缓存npm依赖
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-node-

      - name: 安装依赖
        run: npm ci

      - name: 设置构建环境
        run: cp .env.ci .env

      - name: 构建应用
        run: npm run build

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: build-dist-${{ github.run_id }}
          path: dist/
          retention-days: 1

  # 条件性E2E测试
  e2e-tests:
    name: E2E测试
    runs-on: ubuntu-latest
    needs: [basic-checks, build-check]
    if: needs.basic-checks.outputs.should-run-e2e == 'true' || github.event_name == 'pull_request'

    # 添加服务容器
    services:
      mongodb:
        image: mongo:7.0
        ports:
          - 27017:27017
        options: >-
          --health-cmd "mongosh --eval 'db.runCommand({ping: 1})'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      redis:
        image: redis:7.2-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    strategy:
      matrix:
        browser: [chromium]
        # 可以扩展到 [chromium, firefox, webkit]

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 缓存npm依赖
        uses: actions/cache@v4
        with:
          path: ~/.npm
          key: ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-node-${{ env.CACHE_VERSION }}-
            ${{ runner.os }}-node-

      - name: 缓存Playwright浏览器
        uses: actions/cache@v4
        id: playwright-cache
        with:
          path: ~/.cache/ms-playwright
          key: ${{ runner.os }}-playwright-${{ env.CACHE_VERSION }}-${{ matrix.browser }}-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-playwright-${{ env.CACHE_VERSION }}-${{ matrix.browser }}-
            ${{ runner.os }}-playwright-${{ env.CACHE_VERSION }}-

      - name: 安装前端依赖
        run: npm ci

      - name: 安装后端依赖
        run: |
          cd server
          npm ci
          cd ..

      - name: 安装Playwright浏览器
        if: steps.playwright-cache.outputs.cache-hit != 'true'
        run: npx playwright install --with-deps ${{ matrix.browser }}

      - name: 安装系统依赖（缓存命中时）
        if: steps.playwright-cache.outputs.cache-hit == 'true'
        run: npx playwright install-deps ${{ matrix.browser }}

      - name: 设置CI环境
        run: |
          cp .env.ci .env
          cp server/.env.ci server/.env
          chmod +x scripts/ci-start.sh scripts/ci-stop.sh

      - name: 等待服务就绪
        run: |
          # 等待MongoDB就绪
          timeout 60 bash -c 'until mongosh --host localhost:27017 --eval "db.runCommand({ping: 1})" >/dev/null 2>&1; do sleep 2; done'
          echo "✅ MongoDB 已就绪"

          # 等待Redis就绪
          timeout 60 bash -c 'until redis-cli -h localhost -p 6379 ping >/dev/null 2>&1; do sleep 2; done'
          echo "✅ Redis 已就绪"

      - name: 启动应用服务
        run: |
          # 启动后端服务器
          cd server
          npm start &
          echo $! > /tmp/backend.pid
          cd ..

          # 启动前端服务器
          npm run dev &
          echo $! > /tmp/frontend.pid

          # 等待服务启动
          echo "等待后端服务启动..."
          timeout 60 bash -c 'until curl -f http://localhost:3000/api/health >/dev/null 2>&1 || curl -f http://localhost:3000 >/dev/null 2>&1; do sleep 2; done'
          echo "✅ 后端服务已启动"

          echo "等待前端服务启动..."
          timeout 60 bash -c 'until curl -f http://localhost:5173 >/dev/null 2>&1; do sleep 2; done'
          echo "✅ 前端服务已启动"

      - name: 运行E2E测试
        run: npx playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          NODE_ENV: test

      - name: 停止服务
        if: always()
        run: |
          # 停止前后端服务
          if [ -f /tmp/backend.pid ]; then
            kill $(cat /tmp/backend.pid) 2>/dev/null || true
          fi
          if [ -f /tmp/frontend.pid ]; then
            kill $(cat /tmp/frontend.pid) 2>/dev/null || true
          fi

          # 强制清理端口
          lsof -ti:3000 | xargs kill -9 2>/dev/null || true
          lsof -ti:5173 | xargs kill -9 2>/dev/null || true

      - name: 上传测试报告
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: playwright-report-${{ matrix.browser }}-${{ github.run_id }}
          path: |
            playwright-report/
            test-results/
          retention-days: 3

  # 安全扫描
  security-scan:
    name: 安全扫描
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || contains(github.ref, 'main')

    steps:
      - name: Checkout代码
        uses: actions/checkout@v4

      - name: 设置Node.js环境
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: 安装依赖
        run: npm ci

      - name: 运行npm安全审计
        run: |
          # 运行audit但允许moderate级别的警告
          npm audit --audit-level=high || {
            echo "发现安全警告，检查详情:"
            npm audit --json | jq '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical")'
            exit 1
          }

      - name: 检查后端依赖安全性
        run: |
          cd server
          npm audit --audit-level=high || {
            echo "后端发现安全警告，检查详情:"
            npm audit --json | jq '.vulnerabilities | to_entries[] | select(.value.severity == "high" or .value.severity == "critical")'
            exit 1
          }

  # 部署准备（仅主分支）
  deploy-ready:
    name: 部署就绪检查
    runs-on: ubuntu-latest
    needs: [basic-checks, build-check, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'

    steps:
      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: build-dist-${{ github.run_id }}
          path: dist/

      - name: 检查构建产物
        run: |
          echo "✅ 构建产物检查通过"
          ls -la dist/

          # 检查关键文件是否存在
          if [ ! -f "dist/index.html" ]; then
            echo "❌ index.html 文件缺失"
            exit 1
          fi

          # 检查文件大小
          index_size=$(stat -c%s "dist/index.html" 2>/dev/null || stat -f%z "dist/index.html")
          if [ "$index_size" -lt 100 ]; then
            echo "❌ index.html 文件异常（文件过小）"
            exit 1
          fi

          echo "🎉 应用已准备好部署"

      - name: 创建部署摘要
        run: |
          echo "## 🚀 部署摘要" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 代码质量检查通过" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 构建检查通过" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ E2E测试通过" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ 安全扫描通过" >> $GITHUB_STEP_SUMMARY
          echo "- 🔗 提交: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- 📅 时间: $(date)" >> $GITHUB_STEP_SUMMARY

  # 清理工作
  cleanup:
    name: 清理资源
    runs-on: ubuntu-latest
    needs: [basic-checks, build-check, e2e-tests, deploy-ready]
    if: always()

    steps:
      - name: 清理临时制品
        uses: actions/github-script@v7
        with:
          script: |
            const artifacts = await github.rest.actions.listWorkflowRunArtifacts({
              owner: context.repo.owner,
              repo: context.repo.repo,
              run_id: context.runId,
            });

            // 只保留最新的构建产物，删除其他临时文件
            for (const artifact of artifacts.data.artifacts) {
              if (artifact.name.includes('build-dist')) {
                continue; // 保留构建产物
              }

              if (artifact.created_at < new Date(Date.now() - 24 * 60 * 60 * 1000)) {
                await github.rest.actions.deleteArtifact({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  artifact_id: artifact.id,
                });
              }
            }
